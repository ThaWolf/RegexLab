name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm --prefix frontend ci
          npm --prefix backend ci
      
      - name: Run tests
        run: npm run test
      
      - name: Build frontend
        run: npm --prefix frontend run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      
      - name: Install Playwright Browsers
        run: npx playwright install
      
      - name: Start frontend server and run E2E tests
        run: |
          # Debug: Check environment variables
          echo "🔍 Checking environment variables..."
          echo "NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:0:20}..."
          echo "NEXTAUTH_URL: ${NEXTAUTH_URL}"
          echo "NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:0:10}..."
          echo "GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:0:20}..."
          
          # Start the server in background with debug output
          echo "🚀 Starting frontend server..."
          npm --prefix frontend run start > server.log 2>&1 &
          SERVER_PID=$!
          
          # Wait for server to be ready
          echo "⏳ Waiting for frontend server to start..."
          for i in {1..60}; do
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend server is ready!"
              break
            fi
            echo "Attempt $i: Server not ready yet..."
            if [ $i -eq 30 ]; then
              echo "📋 Server log (first 20 lines):"
              head -20 server.log || true
            fi
            sleep 2
          done
          
          # Verify server is actually running
          if ! curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "❌ Frontend server failed to start"
            echo "📋 Full server log:"
            cat server.log || true
            exit 1
          fi
          
          # Run E2E tests
          echo "🧪 Running E2E tests..."
          npm run test:e2e
          
          # Clean up
          echo "🧹 Cleaning up..."
          kill $SERVER_PID || true
          wait $SERVER_PID 2>/dev/null || true
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm --prefix frontend ci
      
      - name: Build frontend
        run: npm --prefix frontend run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm --prefix backend ci
      
      - name: Build backend
        run: npm --prefix backend run build
      
      - name: Deploy to Railway
        run: |
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service ${{ secrets.RAILWAY_SERVICE_ID }} --directory ./backend 